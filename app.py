# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from multiprocessing import Queue

import numpy as np
from PyQt5 import QtCore, QtWidgets
from matplotlib import cm
from pyqtgraph import ImageItem

from mmwave import MMWave


class Ui_Dialog(object):
    def __init__(self, Dialo):
        self.__queue = Queue()
        self.__mmwave = MMWave(self.__queue)
        range_max = self.__mmwave.get_config()["dataPath"][0]["rangeMeters"]
        # Defining the limits of x, y, and z axes.
        self.__range_x = (-range_max / 2, range_max / 2)
        self.__range_y = (0, range_max)
        self.__range_z = (-range_max / 2, range_max / 2)
        self.__capture = False

        Dialog.setObjectName("Dialog")
        Dialog.resize(1000, 810)
        self.connectBtn = QtWidgets.QPushButton(Dialog)
        self.connectBtn.setGeometry(QtCore.QRect(810, 10, 180, 31))
        self.connectBtn.setObjectName("connectBtn")
        self.xyPlot = PlotWidget(Dialog)
        self.xyPlot.setGeometry(QtCore.QRect(10, 10, 390, 390))
        self.xyPlot.setObjectName("xyPlot")
        self.xzPlot = PlotWidget(Dialog)
        self.xzPlot.setGeometry(QtCore.QRect(410, 10, 390, 390))
        self.xzPlot.setObjectName("xzPlot")
        self.startBtn = QtWidgets.QPushButton(Dialog)
        self.startBtn.setGeometry(QtCore.QRect(810, 60, 180, 31))
        self.startBtn.setObjectName("startBtn")
        self.heatmapPlot = PlotWidget(Dialog)
        self.heatmapPlot.setGeometry(QtCore.QRect(10, 410, 390, 390))
        self.heatmapPlot.setObjectName("heatmapPlot")
        self.cameraView = PlotWidget(Dialog)
        self.cameraView.setGeometry(QtCore.QRect(410, 410, 390, 390))
        self.cameraView.setObjectName("cameraView")

        self.connectBtn.clicked.connect(self.__connect)
        self.startBtn.clicked.connect(self.__start)
        self.startBtn.setEnabled(False)

        self.xyPlot.setXRange(self.__range_x[0], self.__range_x[1])
        self.xyPlot.setYRange(self.__range_y[0], self.__range_y[1])
        self.xyPlot.setBackground('w')

        self.xzPlot.setXRange(self.__range_x[0], self.__range_x[1])
        self.xzPlot.setYRange(self.__range_z[0], self.__range_z[1])
        self.xzPlot.setBackground('w')

        colormap = cm.get_cmap("hot")
        colormap._init()
        lut = (colormap._lut * 255).view(np.ndarray)
        self.__image_item = ImageItem()
        self.heatmapPlot.clear()
        self.heatmapPlot.addItem(self.__image_item)
        self.__image_item.setLookupTable(lut)

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "MMWave Radar"))
        self.connectBtn.setText(_translate("Dialog", "Connect"))
        self.startBtn.setText(_translate("Dialog", "Start"))

    def normalize(self, x, range, bins=15):
        l, u = range
        r = u - l
        normalized_x = (np.array(x) - l) / r
        normalized_x[normalized_x < 0] = 0.0
        normalized_x[normalized_x > 1] = 1.0
        if bins == 1:
            return normalized_x * bins
        return np.ceil(normalized_x * bins).astype(int)

    def __start_listener(self):
        while self.__capture:
            if not self.__queue.empty():
                data = self.__queue.get()
                self.__plot(data)
                frame = np.zeros((16, 16))
                x = self.normalize(data["x"], self.__range_x)
                y = self.normalize(data["z"], self.__range_z)
                z = self.normalize(data["y"], self.__range_y, bins=1)
                frame[x, y] = z
                self.__image_item.setImage(image=frame, levels=(0, 1))

    def __start(self):
        if self.__capture:
            self.__capture = False
            self.__mmwave.terminate()
            self.startBtn.setText("Start")
            self.connectBtn.click()
        else:
            if self.__mmwave.is_connected():
                self.__mmwave.start()
                self.__capture = True
                self.__start_listener()
                self.startBtn.setText("Stop")

    def __connect(self):
        if not self.__mmwave.is_connected():
            if self.__mmwave.connect():
                self.startBtn.setEnabled(True)
                self.connectBtn.setText("Disconnect")
        else:
            self.__mmwave.disconnect()
            self.__mmwave = MMWave(self.__queue)
            self.startBtn.setEnabled(False)
            self.connectBtn.setText("Connect")

    def __plot(self, data):
        self.xyPlot.plot(data["x"], data["y"], clear=True, pen=None, symbol='o')
        self.xzPlot.plot(data["x"], data["z"], clear=True, pen=None, symbol='o')
        QtCore.QCoreApplication.processEvents()


from pyqtgraph import PlotWidget

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
